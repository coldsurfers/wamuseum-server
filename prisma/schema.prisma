// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// accounts
model Account {
  id              String          @id @default(uuid())
  username        String?         @unique
  email           String          @unique
  provider        String?
  password        String?         @db.VarChar(255)
  passwordSalt    String?         @db.VarChar(255)
  created_at      DateTime        @default(now())
  auth_token      AuthToken?
  staff           Staff?
  account_profile AccountProfile?
}

model AccountProfile {
  id         String   @id @default(uuid())
  account    Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id String   @unique
  username   String   @unique @db.VarChar(255)
  created_at DateTime @default(now())
}

model EmailAuthRequest {
  id            String   @id @default(uuid())
  email         String   @unique
  authcode      String
  authenticated Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Staff {
  id            String   @id @default(uuid())
  created_at    DateTime @default(now())
  is_staff      Boolean  @default(false)
  is_authorized Boolean  @default(false)
  account       Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id    String   @unique
}

model AuthToken {
  id            String   @id @default(uuid())
  access_token  String   @db.Text
  refresh_token String   @db.Text
  account       Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id    String   @unique
  created_at    DateTime @default(now())
}

// louder
model Track {
  id         String   @id @default(uuid())
  filename   String   @unique
  url        String   @unique
  created_at DateTime @default(now())
  post       Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    String?
  song       Song?    @relation(fields: [song_id], references: [id], onDelete: Cascade)
  song_id    String?  @unique
}

model AlbumCover {
  id         String   @id @default(uuid())
  filename   String   @unique
  url        String   @unique
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    String   @unique
}

model Post {
  id          String      @id @default(uuid())
  title       String
  artist_name String
  album_cover AlbumCover?
  track       Track[]
  song        Song[]
  created_at  DateTime    @default(now())
}

model Song {
  id         String   @id @default(uuid())
  title      String
  created_at DateTime @default(now())
  post       Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    String?
  track      Track?
}

// billets

model ConcertCategory {
  id        Int       @id @default(autoincrement())
  title     String
  concerts  Concert[]
  createdAt DateTime  @default(now())
}

model Concert {
  id                String          @id @default(uuid())
  artist            String?
  title             String
  location          String?
  date              DateTime?
  html              String?         @db.Text
  concertCategoryId Int             @default(1)
  concertCategory   ConcertCategory @relation(fields: [concertCategoryId], references: [id])
  posters           ConcertPoster[]
  tickets           ConcertTicket[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?

  @@index([concertCategoryId])
}

model ConcertPoster {
  id        String   @id @default(uuid())
  concertId String
  concert   Concert  @relation(fields: [concertId], references: [id])
  imageURL  String
  createdAt DateTime @default(now())

  @@index([concertId])
}

model ConcertTicket {
  id           String               @id @default(uuid())
  concertId    String
  concert      Concert              @relation(fields: [concertId], references: [id])
  openDate     DateTime
  seller       String
  sellingURL   String
  createdAt    DateTime             @default(now())
  ticketPrices ConcertTicketPrice[]

  @@index([concertId])
}

model ConcertTicketPrice {
  id              String        @id @default(uuid())
  concertTicketId String
  concertTicket   ConcertTicket @relation(fields: [concertTicketId], references: [id])
  title           String
  price           Float
  priceCurrency   String
  createdAt       DateTime      @default(now())

  @@index([concertTicketId])
}

// grungebank
// model GB_Feed {}

// model GB_FeedLike {}

// model GB_FeedReply {}
